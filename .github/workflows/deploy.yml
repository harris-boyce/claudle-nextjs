name: Deploy to Vercel

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run lint
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy Preview
    needs: test
    if: github.event_name == 'pull_request'
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --env ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY --env ENABLE_INTERACTIVE_COACHING=$ENABLE_INTERACTIVE_COACHING)
          echo "preview_url=$url" >> $GITHUB_OUTPUT
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENABLE_INTERACTIVE_COACHING: true

      - name: Comment Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployment ready!**\n\n✅ Deploy URL: ${{ steps.deploy.outputs.preview_url }}\n\n---\n*ClaudLE Preview - Powered by Vercel*`
            })

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy Production
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --env ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY --env ENABLE_INTERACTIVE_COACHING=$ENABLE_INTERACTIVE_COACHING)
          echo "production_url=$url" >> $GITHUB_OUTPUT
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENABLE_INTERACTIVE_COACHING: false

      - name: Create Release
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v1.0.${{ github.run_number }}`,
              name: `ClaudLE v1.0.${{ github.run_number }} - ${{ github.event.head_commit.message }}`,
              body: `🎯 **Production deployment successful!**\n\n🚀 Live URL: https://claudle-nextjs.vercel.app\n\nCommit: ${{ github.event.head_commit.message }}\nSHA: ${{ github.sha }}\n\n### Features:\n- AI-Enhanced Wordle with Strategic Coaching\n- 10 Unique Themes (Technology, Nature, Movies, etc.)\n- Ted Lasso & Roy Kent AI Personalities\n- Production-Ready AI Integration Patterns\n- Educational Prompt Engineering Resource\n- Progressive Web App Experience\n\n### Educational Value:\n- Complete Tutorial System (Artifact → Enterprise Platform)\n- Sophisticated Prompt Engineering Examples\n- Cost-Controlled AI Integration Patterns\n- Community Learning Platform\n\n---\n*Deployed via GitHub Actions | Built with Claude Code*`,
              draft: false,
              prerelease: false
            })

  lighthouse:
    runs-on: ubuntu-latest
    name: Performance & Accessibility Audit
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Start application
        run: |
          npm start &
          echo $! > server.pid
          sleep 15

      - name: Wait for server
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Server is ready!"
              exit 0
            fi
            echo "Waiting for server... (attempt $i)"
            sleep 2
          done
          echo "Server failed to start"
          exit 1

      - name: Run Lighthouse Audit
        run: |
          npx lighthouse http://localhost:3000 \
            --output=json \
            --output=html \
            --output-path=./lighthouse-results \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --preset=desktop \
            --quiet

      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: |
            lighthouse-results.report.html
            lighthouse-results.report.json

      - name: Parse Lighthouse Results
        run: |
          PERFORMANCE=$(cat lighthouse-results.report.json | jq '.categories.performance.score')
          ACCESSIBILITY=$(cat lighthouse-results.report.json | jq '.categories.accessibility.score')
          BEST_PRACTICES=$(cat lighthouse-results.report.json | jq '.categories["best-practices"].score')
          SEO=$(cat lighthouse-results.report.json | jq '.categories.seo.score')

          echo "## 🚀 Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Score | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | $(echo $PERFORMANCE | awk '{printf "%.0f", $1*100}')% | $([ $(echo "$PERFORMANCE > 0.8" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | $(echo $ACCESSIBILITY | awk '{printf "%.0f", $1*100}')% | $([ $(echo "$ACCESSIBILITY > 0.9" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |" >> $GITHUB_STEP_SUMMARY
          echo "| Best Practices | $(echo $BEST_PRACTICES | awk '{printf "%.0f", $1*100}')% | $([ $(echo "$BEST_PRACTICES > 0.9" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |" >> $GITHUB_STEP_SUMMARY
          echo "| SEO | $(echo $SEO | awk '{printf "%.0f", $1*100}')% | $([ $(echo "$SEO > 0.9" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View detailed report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi